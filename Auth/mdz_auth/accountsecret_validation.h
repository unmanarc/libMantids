#ifndef IAUTH_VALIDATION_ACCOUNT_H
#define IAUTH_VALIDATION_ACCOUNT_H

#include <string>
#include <set>

#include "ds_auth_mode.h"
#include "ds_auth_reason.h"
#include "ds_auth_function.h"
#include "ds_auth_secret.h"

#include <mdz_thr_safecontainers/map_element.h>

namespace Mantids { namespace Authentication {

struct sApplicationAttrib {
    bool operator<(const sApplicationAttrib & x) const
    {
        if (x.appName < appName) return true;
        else if (x.appName == appName && x.attribName < attribName) return true;
        else return false;
    }
    std::string appName,attribName;
};

struct sClientDetails {
    std::string sIPAddr,sExtraData,sTLSCommonName,sUserAgent;
};

class AccountSecret_Validation : public Mantids::Threads::Safe::Map_Element
{
public:
    AccountSecret_Validation();
    virtual ~AccountSecret_Validation();

    virtual std::string accountConfirmationToken(const std::string & sAccountName)=0;
    virtual Secret_PublicData accountSecretPublicData(const std::string & sAccountName, uint32_t passIndex=0)=0;
    virtual Reason authenticate(const std::string & appName,const sClientDetails & clientDetails,const std::string & sAccountName, const std::string & password, uint32_t passIndex = 0, Mode authMode = MODE_PLAIN, const std::string & challengeSalt = "",
                                std::map<uint32_t,std::string> * accountPassIndexesUsedForLogin = nullptr )=0;

    virtual bool accountValidateAttribute(const std::string & sAccountName, const sApplicationAttrib & applicationAttrib)=0;

protected:
    Reason validateStoredSecret(const Secret & storedSecret, const std::string & passwordInput, const std::string &challengeSalt, Mode authMode);

private:
    /**
     * @brief validateChallenge Validate the Challenge (SHA256(Pass+Salt))
     * @param passwordFromDB Incomming password from DB
     * @param challengeInput Challenge Input SHA256(Pass+Salt)
     * @param challengeSalt Challenge Salt (Random Value generated by your app, take the security considerations)
     * @return Authentication Response Reason (authenticated or bad password)
     */
    Reason validateChallenge(const std::string & passwordFromDB, const std::string & challengeInput, const std::string &challengeSalt);
    Reason validateGAuth(const std::string & seed, const std::string & token);
};

}}

#endif // IAUTH_VALIDATION_ACCOUNT_H
